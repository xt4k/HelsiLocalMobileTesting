plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.10.0'
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

ext {
    allureVersion = "2.23.0"
    appiumVersion ="8.5.1"//"7.5.1"//
    aspectjVersion = "1.9.19"
    assertjVersion = "3.24.2"

    jacksonVersion = "2.15.2"
    junitVersion = "5.9.3"

    logbackVersion="1.4.8"
    selenideVersion = "6.15.0"
    ownerVersion = "1.0.12"
    restAssuredVersion = "5.3.0"
    slf4jVersion = "2.0.7"

}


allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    implementation ("ch.qos.logback:logback-core:${logbackVersion}")
        //    'com.codeborne:selenide-appium:6.15.0')
    testImplementation(
            "org.slf4j:slf4j-api:${slf4jVersion}",
            "ch.qos.logback:logback-classic:${logbackVersion}",

            "io.rest-assured:rest-assured:${restAssuredVersion}",

            "commons-io:commons-io:2.11.0",

            "org.assertj:assertj-core:${assertjVersion}",

            "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}",

            "org.aspectj:aspectjweaver:${aspectjVersion}",
            "com.codeborne:selenide:${selenideVersion}",

            "io.qameta.allure:allure-rest-assured:${allureVersion}",
            "io.qameta.allure:allure-java-commons:${allureVersion}",
            "io.qameta.allure:allure-selenide:${allureVersion}",

            "io.appium:java-client:${appiumVersion}",
            "org.aeonbits.owner:owner:${ownerVersion}",
            "org.junit.jupiter:junit-jupiter-params:${junitVersion}",
            "org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}



tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task runSearchTests (type:Test){
    useJUnitPlatform {
        includeTags 'android'
    }
}